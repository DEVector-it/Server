const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');

const app = express();
const router = express.Router();
const PORT = process.env.PORT || 3000; 
const SECRET_KEY = 'your_super_secret_jwt_key_that_is_long_and_secure';

// Middleware
app.use(cors());
app.use(express.json());

// In-memory "database"
let users = {};
let promoCodes = {};
let siteStatus = { isMaintenanceMode: false, message: "We'll be back soon!" };

const ADMIN_USER = { username: 'admin', password: 'admin123' };

// --- Security Middleware ---
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    if (token == null) return res.sendStatus(401);

    jwt.verify(token, SECRET_KEY, (err, user) => {
        if (err) return res.sendStatus(403);
        req.user = user;
        next();
    });
};

const checkAdminRole = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ error: 'Access denied. Admin privileges required.' });
    }
    next();
};

// --- AUTHENTICATION ENDPOINTS ---
router.post('/auth/register', (req, res) => {
    const { username, password } = req.body;
    if (users[username]) {
        return res.status(409).json({ error: 'Username already exists.' });
    }
    users[username] = {
        password: password, // In a real app, HASH this password!
        chats: {},
        unlockedModels: ["G-4 Fusion"],
        activeModel: "G-4 Fusion",
        avatarColor: `hsl(${Math.random() * 360}, 50%, 50%)`,
        role: 'user'
    };
    const token = jwt.sign({ username: username, role: 'user' }, SECRET_KEY);
    res.json({ token, user: users[username] });
});

router.post('/auth/login', (req, res) => {
    const { username, password } = req.body;
    if (username === ADMIN_USER.username && password === ADMIN_USER.password) {
        const token = jwt.sign({ username: ADMIN_USER.username, role: 'admin' }, SECRET_KEY);
        return res.json({ token, user: { username: 'admin', role: 'admin' } });
    }
    if (users[username] && users[username].password === password) {
        const token = jwt.sign({ username: username, role: 'user' }, SECRET_KEY);
        return res.json({ token, user: users[username] });
    }
    res.status(401).json({ error: 'Invalid username or password.' });
});

// --- PUBLIC STATUS ENDPOINT ---
router.get('/status', (req, res) => {
    res.json(siteStatus);
});

// --- NEW ADVANCED AI ENDPOINT ---
router.post('/ai/generate', authenticateToken, (req, res) => {
    const { prompt, featureType } = req.body;
    let content = "I'm sorry, I can't process that request.";

    switch (featureType) {
        case 'summarize':
            content = `**Summary of your document:**\n\nThe provided text discusses several key points. The primary argument revolves around the central theme, which is supported by various examples and data. The author concludes by suggesting a call to action. This summary is generated by Myth AI's advanced summarization model.`;
            break;
        case 'translate':
            content = `**Translation (Simulated Spanish):**\n\nHola, este es un texto de ejemplo traducido por el modelo de lenguaje avanzado de Myth AI. Demuestra la capacidad de comprender y convertir el lenguaje de una forma a otra con precisiÃ³n contextual.`;
            break;
        case 'solve_math':
            content = `**Solution:**\n\nThe solution to the problem \`${prompt}\` involves several steps. \n1. First, we identify the core mathematical principles.\n2. Next, we apply the relevant formulas.\n3. Finally, after calculation, the answer is **42**.\n\n*Solved by Myth AI Math Engine.*`;
            break;
        case 'code_helper':
            content = "Of course! Here is a Python code snippet to help you get started:\n\n```python\n# Solved by Myth AI Code Helper\nclass Helper:\n    def __init__(self, task):\n        self.task = task\n\n    def execute(self):\n        print(f\"Executing task: {self.task}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    helper_task = Helper(\"Optimize user workflow\")\n    helper_task.execute()\n```";
            break;
    }

    res.json({ content });
});


// --- ADMIN ENDPOINTS (SECURED) ---
router.get('/admin/dashboard', authenticateToken, checkAdminRole, (req, res) => {
    const userCount = Object.keys(users).length;
    const totalChats = Object.values(users).reduce((acc, user) => acc + Object.keys(user.chats || {}).length, 0);
    const activeCodes = Object.keys(promoCodes).length;
    res.json({ userCount, totalChats, activeCodes, users, promoCodes, siteStatus });
});

router.post('/admin/promo-codes', authenticateToken, checkAdminRole, (req, res) => {
    const { code, model, expiry } = req.body;
    if (!code || !model || !expiry) {
        return res.status(400).json({ error: 'Missing code, model, or expiry date.' });
    }
    promoCodes[code] = { model, expiry };
    res.status(201).json({ message: 'Promo code created successfully.', promoCodes });
});

router.delete('/admin/promo-codes/:code', authenticateToken, checkAdminRole, (req, res) => {
    const { code } = req.params;
    if (!promoCodes[code]) {
        return res.status(404).json({ error: 'Promo code not found.' });
    }
    delete promoCodes[code];
    res.json({ message: 'Promo code deleted successfully.', promoCodes });
});

router.put('/admin/status', authenticateToken, checkAdminRole, (req, res) => {
    const { isMaintenanceMode, message } = req.body;
    siteStatus.isMaintenanceMode = isMaintenanceMode;
    siteStatus.message = message;
    res.json({ message: 'Site status updated.', siteStatus });
});

// --- USER-FACING ENDPOINTS (SECURED) ---
router.get('/user/data', authenticateToken, (req, res) => {
    const user = users[req.user.username];
    if (!user) {
        return res.status(404).json({ error: 'User not found.' });
    }
    res.json(user);
});

router.post('/user/chats', authenticateToken, (req, res) => {
    const { chatId, message } = req.body;
    const user = users[req.user.username];
    if (!user.chats[chatId]) {
        user.chats[chatId] = { id: chatId, timestamp: Date.now(), title: 'New Chat', messages: [] };
    }
    if(message && Object.keys(message).length > 0) {
        user.chats[chatId].messages.push(message);
    }
    res.status(201).json({ message: 'Message added.', chats: user.chats });
});

router.post('/user/redeem', authenticateToken, (req, res) => {
    const { code } = req.body;
    const codeData = promoCodes[code];
    const user = users[req.user.username];

    if (!codeData || new Date(codeData.expiry) < new Date()) {
        return res.status(400).json({ error: 'Invalid or expired code.' });
    }

    if (user.unlockedModels.includes(codeData.model)) {
        return res.status(409).json({ error: 'Model already unlocked.' });
    }

    user.unlockedModels.push(codeData.model);
    res.json({ message: `${codeData.model} unlocked!`, user });
});

app.use('/api', router);

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});



